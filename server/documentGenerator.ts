import { 
  Document, Paragraph, HeadingLevel, 
  AlignmentType, Packer
} from 'docx';
import PDFDocument from 'pdfkit';
import type { CognitiveAnalysisResult, PsychologicalAnalysisResult, ModelProvider } from '../client/src/types/analysis';

/**
 * Generates a Word document (.docx) from analysis results
 */
export function generateWordDocument(
  analysis: CognitiveAnalysisResult | PsychologicalAnalysisResult,
  provider: ModelProvider,
  analysisType: 'cognitive' | 'psychological'
): Promise<Buffer> {
  // Create document with sections
  const doc = new Document({
    sections: [{
      properties: {},
      children: generateDocumentContent(analysis, provider, analysisType)
    }]
  });

  // Return document as buffer asynchronously
  return Packer.toBuffer(doc);
}

/**
 * Helper function to generate document content
 */
function generateDocumentContent(
  analysis: CognitiveAnalysisResult | PsychologicalAnalysisResult,
  provider: ModelProvider,
  analysisType: 'cognitive' | 'psychological'
): Paragraph[] {
  const paragraphs: Paragraph[] = [];

  // Header
  paragraphs.push(
    new Paragraph({
      text: `${analysisType === 'cognitive' ? 'Cognitive' : 'Psychological'} Analysis Report`,
      heading: HeadingLevel.HEADING_1,
      alignment: AlignmentType.CENTER,
    }),
    new Paragraph({
      text: `Generated by ${getProviderName(provider)} AI`,
      alignment: AlignmentType.CENTER,
    }),
    new Paragraph({
      text: `Date: ${new Date().toLocaleDateString()}`,
      alignment: AlignmentType.CENTER,
    }),
    new Paragraph({ text: '' })
  );

  if (analysisType === 'cognitive') {
    const cognitiveAnalysis = analysis as CognitiveAnalysisResult;
    
    // Intelligence score section
    paragraphs.push(
      new Paragraph({
        text: 'Intelligence Estimate',
        heading: HeadingLevel.HEADING_2,
      }),
      new Paragraph({
        text: `Score: ${cognitiveAnalysis.intelligenceScore}/100`,
      }),
      new Paragraph({ text: '' }),
      
      // Cognitive characteristics
      new Paragraph({
        text: 'Cognitive Characteristics',
        heading: HeadingLevel.HEADING_2,
      })
    );
    
    // Add each characteristic
    cognitiveAnalysis.characteristics.forEach(char => {
      paragraphs.push(new Paragraph({ text: `• ${char}` }));
    });
    
    paragraphs.push(new Paragraph({ text: '' }));
    
    // Detailed analysis
    paragraphs.push(
      new Paragraph({
        text: 'Detailed Analysis',
        heading: HeadingLevel.HEADING_2,
      }),
      new Paragraph({
        text: cognitiveAnalysis.detailedAnalysis,
      }),
      new Paragraph({ text: '' }),
      
      // Strengths
      new Paragraph({
        text: 'Cognitive Strengths',
        heading: HeadingLevel.HEADING_2,
      })
    );
    
    // Add each strength
    cognitiveAnalysis.strengths.forEach(strength => {
      paragraphs.push(new Paragraph({ text: `• ${strength}` }));
    });
    
    paragraphs.push(new Paragraph({ text: '' }));
    
    // Tendencies
    paragraphs.push(
      new Paragraph({
        text: 'Cognitive Tendencies',
        heading: HeadingLevel.HEADING_2,
      })
    );
    
    // Add each tendency
    cognitiveAnalysis.tendencies.forEach(tendency => {
      paragraphs.push(new Paragraph({ text: `• ${tendency}` }));
    });
  } else {
    // Psychological analysis
    const psychAnalysis = analysis as PsychologicalAnalysisResult;
    
    // Emotional Profile Section
    paragraphs.push(
      new Paragraph({
        text: 'Emotional Profile',
        heading: HeadingLevel.HEADING_2,
      }),
      new Paragraph({
        text: `Emotional Stability Score: ${psychAnalysis.emotionalProfile.emotionalStability}/100`,
      }),
      new Paragraph({ text: '' }),
      
      new Paragraph({
        text: 'Primary Emotions:',
        heading: HeadingLevel.HEADING_3,
      })
    );
    
    // Add each emotion
    psychAnalysis.emotionalProfile.primaryEmotions.forEach(emotion => {
      paragraphs.push(new Paragraph({ text: `• ${emotion}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      new Paragraph({
        text: 'Emotional Profile Analysis:',
        heading: HeadingLevel.HEADING_3,
      }),
      new Paragraph({
        text: psychAnalysis.emotionalProfile.detailedAnalysis,
      }),
      new Paragraph({ text: '' })
    );
    
    // Motivational Structure Section
    paragraphs.push(
      new Paragraph({
        text: 'Motivational Structure',
        heading: HeadingLevel.HEADING_2,
      }),
      new Paragraph({
        text: 'Primary Drives:',
        heading: HeadingLevel.HEADING_3,
      })
    );
    
    // Add each drive
    psychAnalysis.motivationalStructure.primaryDrives.forEach(drive => {
      paragraphs.push(new Paragraph({ text: `• ${drive}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      new Paragraph({
        text: 'Motivational Patterns:',
        heading: HeadingLevel.HEADING_3,
      })
    );
    
    // Add each pattern
    psychAnalysis.motivationalStructure.motivationalPatterns.forEach(pattern => {
      paragraphs.push(new Paragraph({ text: `• ${pattern}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      new Paragraph({
        text: 'Motivational Structure Analysis:',
        heading: HeadingLevel.HEADING_3,
      }),
      new Paragraph({
        text: psychAnalysis.motivationalStructure.detailedAnalysis,
      }),
      new Paragraph({ text: '' })
    );
    
    // Interpersonal Dynamics Section
    paragraphs.push(
      new Paragraph({
        text: 'Interpersonal Dynamics',
        heading: HeadingLevel.HEADING_2,
      }),
      new Paragraph({
        text: `Attachment Style: ${psychAnalysis.interpersonalDynamics.attachmentStyle}`,
      }),
      new Paragraph({ text: '' }),
      
      new Paragraph({
        text: 'Social Orientations:',
        heading: HeadingLevel.HEADING_3,
      })
    );
    
    // Add each orientation
    psychAnalysis.interpersonalDynamics.socialOrientations.forEach(orientation => {
      paragraphs.push(new Paragraph({ text: `• ${orientation}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      new Paragraph({
        text: 'Relationship Patterns:',
        heading: HeadingLevel.HEADING_3,
      })
    );
    
    // Add each pattern
    psychAnalysis.interpersonalDynamics.relationshipPatterns.forEach(pattern => {
      paragraphs.push(new Paragraph({ text: `• ${pattern}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      new Paragraph({
        text: 'Interpersonal Dynamics Analysis:',
        heading: HeadingLevel.HEADING_3,
      }),
      new Paragraph({
        text: psychAnalysis.interpersonalDynamics.detailedAnalysis,
      }),
      new Paragraph({ text: '' })
    );
    
    // Strengths and Challenges Section
    paragraphs.push(
      new Paragraph({
        text: 'Psychological Strengths',
        heading: HeadingLevel.HEADING_2,
      })
    );
    
    // Add each strength
    psychAnalysis.strengths.forEach(strength => {
      paragraphs.push(new Paragraph({ text: `• ${strength}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      new Paragraph({
        text: 'Psychological Challenges',
        heading: HeadingLevel.HEADING_2,
      })
    );
    
    // Add each challenge
    psychAnalysis.challenges.forEach(challenge => {
      paragraphs.push(new Paragraph({ text: `• ${challenge}` }));
    });
    
    paragraphs.push(
      new Paragraph({ text: '' }),
      
      // Overall Summary Section
      new Paragraph({
        text: 'Overall Summary',
        heading: HeadingLevel.HEADING_2,
      }),
      new Paragraph({
        text: psychAnalysis.overallSummary,
      })
    );
  }

  // Add a footer
  paragraphs.push(
    new Paragraph({ text: '' }),
    new Paragraph({
      text: 'This analysis is for informational purposes only and should not be used for clinical diagnosis.',
      alignment: AlignmentType.CENTER,
    })
  );

  return paragraphs;
}

/**
 * Generates a PDF document from analysis results
 */
export function generatePdfDocument(
  analysis: CognitiveAnalysisResult | PsychologicalAnalysisResult,
  provider: ModelProvider,
  analysisType: 'cognitive' | 'psychological'
): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const chunks: Buffer[] = [];
      const doc = new PDFDocument({ margin: 50 });

      doc.on('data', (chunk) => {
        chunks.push(Buffer.from(chunk));
      });

      doc.on('end', () => {
        const result = Buffer.concat(chunks);
        resolve(result);
      });
      
      // Title
      doc.font('Helvetica-Bold')
         .fontSize(24)
         .text(`${analysisType === 'cognitive' ? 'Cognitive' : 'Psychological'} Analysis Report`, 
               { align: 'center' });
      
      doc.moveDown();
      doc.fontSize(14)
         .text(`Generated by ${getProviderName(provider)} AI`, { align: 'center' });
      
      doc.moveDown();
      doc.fontSize(12)
         .text(`Date: ${new Date().toLocaleDateString()}`, { align: 'center' });
      
      doc.moveDown(2);

      if (analysisType === 'cognitive') {
        const cognitiveAnalysis = analysis as CognitiveAnalysisResult;
        
        // Intelligence score
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Intelligence Estimate');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12)
           .text(`Score: ${cognitiveAnalysis.intelligenceScore}/100`);
        
        doc.moveDown();
        
        // Cognitive characteristics
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Cognitive Characteristics');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12);
        
        cognitiveAnalysis.characteristics.forEach(char => {
          doc.text(`• ${char}`);
        });
        
        doc.moveDown();
        
        // Detailed analysis
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Detailed Analysis');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12)
           .text(cognitiveAnalysis.detailedAnalysis, {
             align: 'justify',
             paragraphGap: 5
           });
        
        doc.moveDown();
        
        // Strengths
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Cognitive Strengths');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12);
        
        cognitiveAnalysis.strengths.forEach(strength => {
          doc.text(`• ${strength}`);
        });
        
        doc.moveDown();
        
        // Tendencies
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Cognitive Tendencies');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12);
        
        cognitiveAnalysis.tendencies.forEach(tendency => {
          doc.text(`• ${tendency}`);
        });
      } else {
        // Psychological analysis
        const psychAnalysis = analysis as PsychologicalAnalysisResult;
        
        // Emotional Profile Section
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Emotional Profile');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12)
           .text(`Emotional Stability Score: ${psychAnalysis.emotionalProfile.emotionalStability}/100`);
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Primary Emotions:');
        
        doc.font('Helvetica')
           .fontSize(12);
        psychAnalysis.emotionalProfile.primaryEmotions.forEach(emotion => {
          doc.text(`• ${emotion}`);
        });
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Emotional Profile Analysis:');
        
        doc.font('Helvetica')
           .fontSize(12)
           .text(psychAnalysis.emotionalProfile.detailedAnalysis, {
             align: 'justify',
             paragraphGap: 5
           });
        
        doc.moveDown(1);
        
        // Motivational Structure Section
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Motivational Structure');
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Primary Drives:');
        
        doc.font('Helvetica')
           .fontSize(12);
        psychAnalysis.motivationalStructure.primaryDrives.forEach(drive => {
          doc.text(`• ${drive}`);
        });
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Motivational Patterns:');
        
        doc.font('Helvetica')
           .fontSize(12);
        psychAnalysis.motivationalStructure.motivationalPatterns.forEach(pattern => {
          doc.text(`• ${pattern}`);
        });
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Motivational Structure Analysis:');
        
        doc.font('Helvetica')
           .fontSize(12)
           .text(psychAnalysis.motivationalStructure.detailedAnalysis, {
             align: 'justify',
             paragraphGap: 5
           });
        
        doc.moveDown(1);
        
        // Add a new page if needed
        if (doc.y > 650) {
          doc.addPage();
        }
        
        // Interpersonal Dynamics Section
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Interpersonal Dynamics');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12)
           .text(`Attachment Style: ${psychAnalysis.interpersonalDynamics.attachmentStyle}`);
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Social Orientations:');
        
        doc.font('Helvetica')
           .fontSize(12);
        psychAnalysis.interpersonalDynamics.socialOrientations.forEach(orientation => {
          doc.text(`• ${orientation}`);
        });
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Relationship Patterns:');
        
        doc.font('Helvetica')
           .fontSize(12);
        psychAnalysis.interpersonalDynamics.relationshipPatterns.forEach(pattern => {
          doc.text(`• ${pattern}`);
        });
        
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold')
           .fontSize(14)
           .text('Interpersonal Dynamics Analysis:');
        
        doc.font('Helvetica')
           .fontSize(12)
           .text(psychAnalysis.interpersonalDynamics.detailedAnalysis, {
             align: 'justify',
             paragraphGap: 5
           });
        
        doc.moveDown(1);
        
        // Add a new page if needed
        if (doc.y > 650) {
          doc.addPage();
        }
        
        // Strengths and Challenges Section
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Psychological Strengths');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12);
        
        psychAnalysis.strengths.forEach(strength => {
          doc.text(`• ${strength}`);
        });
        
        doc.moveDown(1);
        
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Psychological Challenges');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12);
        
        psychAnalysis.challenges.forEach(challenge => {
          doc.text(`• ${challenge}`);
        });
        
        doc.moveDown(1);
        
        // Overall Summary Section
        doc.font('Helvetica-Bold')
           .fontSize(16)
           .text('Overall Summary');
        
        doc.moveDown(0.5);
        doc.font('Helvetica')
           .fontSize(12)
           .text(psychAnalysis.overallSummary, {
             align: 'justify',
             paragraphGap: 5
           });
      }
      
      // Footer
      doc.moveDown(2);
      doc.font('Helvetica-Oblique')
         .fontSize(10)
         .text('This analysis is for informational purposes only and should not be used for clinical diagnosis.', 
               { align: 'center' });
      
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

/**
 * Helper to get a friendly provider name
 */
function getProviderName(provider: ModelProvider): string {
  switch (provider) {
    case 'deepseek':
      return 'DeepSeek';
    case 'openai':
      return 'OpenAI';
    case 'anthropic':
      return 'Claude';
    case 'perplexity':
      return 'Perplexity';
    default:
      return provider;
  }
}