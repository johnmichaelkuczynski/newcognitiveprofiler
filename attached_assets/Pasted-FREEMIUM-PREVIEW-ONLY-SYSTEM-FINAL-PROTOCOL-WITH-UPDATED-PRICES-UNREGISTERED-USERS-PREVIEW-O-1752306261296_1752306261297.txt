FREEMIUM PREVIEW-ONLY SYSTEM (FINAL PROTOCOL — WITH UPDATED PRICES)
👤 UNREGISTERED USERS (PREVIEW ONLY)
No full output is ever given

All content is generated by real AI — but only the first few lines are shown

No tokens are deducted

No API calls if input exceeds preview limits

🔍 PREVIEW BEHAVIOR
Truncate AI output after ~1–2 sentences or 50 words

Append this upgrade message:

pgsql
Copy
Edit
✨ This is a preview of your real result.
🔒 Unlock full results by registering and purchasing credits.
[Register & Unlock Full Access]
📤 Uploads for Free Users
Block all uploads by unregistered users

Show:

css
Copy
Edit
🔒 Uploads require registration. [Register & Unlock Access]
🔑 REGISTERED USERS + CREDIT SYSTEM
🔐 REGISTRATION
Email + password (no email verification)

Session persists across reloads

User remains logged in until logout

💳 STRIPE CREDIT PRICING (UPDATED)
Price	Tokens
$1	1,000 tokens
$10	20,000 tokens
$100	500,000 tokens
$1,000	10,000,000 tokens

Credit purchase via Stripe Checkout

Token balance updates instantly

Token balance stored in Neon DB by user_id

🧾 TOKEN DEDUCTION (REGISTERED USERS ONLY)
All AI completions deduct tokens = input + output

If token balance = 0, block usage and show:

css
Copy
Edit
🔒 You’ve used all your credits. [Buy More Credits]
📄 DOCUMENT UPLOAD + STORAGE
📤 ONE-TIME UPLOAD COST
Only for registered users

Supported formats: PDF, DOCX, TXT

Charge: 1 token per 100 words

Minimum: 100 tokens

Maximum: 10,000 tokens

Deduct silently at upload time

🗄️ OPTIONAL STORAGE COST
If document is retained beyond session:

Charge: 1 token per 250 words per month

Auto-deduct monthly

If balance too low → lock access and show:

pgsql
Copy
Edit
🔒 File storage paused until credits are added. [Buy More Credits]
🧠 NEON DATABASE SETUP (SECURE SHARED DB)
📦 TABLE STRUCTURE
sql
Copy
Edit
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  token_balance INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  filename TEXT NOT NULL,
  content TEXT NOT NULL,
  word_count INTEGER,
  uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
🔐 DB SECURITY
One shared Neon DB across all users

Every query must filter by user_id

No user may access another’s data

Never allow SELECT * without user scoping

Example safe query:
ts
Copy
Edit
await db.select().from(documents).where(eq(documents.user_id, currentUserId));
🔁 SESSION TRACKING (MANDATORY)
Use session ID or user ID for all token and document access

Never use IP address (Replit proxy breaks this)

Session and auth must persist across page reloads

🧾 TOKEN LOGGING
Log every token event with:

Timestamp

Session ID or user ID

Token amount used

Remaining balance

✅ REQUIRED TEST CASES
Unregistered user submits → receives real preview + upgrade message

Registered user uploads → correct token deduction

Registered user buys credits → token balance updates

Page refresh → session and login persist

User A uploads doc → User B cannot access

User A deletes doc → User B unaffected

