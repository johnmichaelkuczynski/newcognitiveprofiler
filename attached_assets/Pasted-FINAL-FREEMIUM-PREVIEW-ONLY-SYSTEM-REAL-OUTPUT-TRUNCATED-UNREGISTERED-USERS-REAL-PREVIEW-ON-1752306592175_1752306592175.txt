FINAL FREEMIUM PREVIEW-ONLY SYSTEM (REAL OUTPUT — TRUNCATED)
👤 UNREGISTERED USERS (REAL PREVIEW ONLY — LIMITED, AUTHENTIC)
Unregistered users may submit actual inputs

App generates genuine output using the real AI model

Preview is authentic, but truncated — max ~50 words or ~1–2 sentences

Small token cost is acceptable, but limit exposure

No full answers are ever shown to unregistered users

Truncated output ends with upgrade prompt

Preview Footer Message:
🔒 This is a real preview of your result.
[Register & Unlock Full Access]

Examples:
Grading App:
“Grade: B+ — Shows potential in argument structure...”
→ 🔒 [Register & Unlock Full Feedback]

Rewrite App:
“Revised: In today's society, efficiency is...”
→ 🔒 [Register & Unlock Full Rewrite]

Comparison App:
“Einstein: A+ | Your Text: B — Strong ideas, unclear logic...”
→ 🔒 [Register & Unlock Complete Comparison]

🔑 REGISTERED USERS + CREDIT SYSTEM
🧾 REGISTRATION
Email + password (no email verification)

Auth must persist across reloads

💳 STRIPE CREDIT PURCHASE
Price	Tokens
$1	1,000 tokens
$10	20,000 tokens
$100	500,000 tokens
$1,000	10,000,000 tokens

Token balance updates immediately after purchase

Stored in Neon DB keyed to user ID

If balance = 0 → block usage + show buy prompt

📤 DOCUMENT UPLOADS (REGISTERED USERS ONLY)
Upload Rules:
Only logged-in users can upload files (PDF, DOCX, TXT)

Free users attempting upload see:

🔒 File upload requires registration. [Register & Unlock Access]

Upload Cost:
1 token per 100 words (rounded up)

Min charge: 100 tokens

Max charge: 10,000 tokens

Deducted silently at upload

Optional Storage:
1 token per 250 words per month

Auto-deducted monthly

If balance = 0 → lock access to file + show:

🔒 File storage paused until credits are added.

🧠 NEON DATABASE SETUP
Shared PostgreSQL DB:
sql
Copy
Edit
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  token_balance INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  filename TEXT NOT NULL,
  content TEXT NOT NULL,
  word_count INTEGER,
  uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Security Rules:
Every query must filter by user_id

No user can see another’s data

No schema separation — enforce on backend/frontend

Sample query:

ts
Copy
Edit
await db.select().from(documents).where(eq(documents.user_id, currentUserId));
🔁 SESSION-BASED TRACKING
Never use IPs for tracking (due to proxy churn)

Use session ID (or user ID if logged in)

Session persists across reloads

🧾 TOKEN LOGGING
Log every token event with:

Timestamp

Session/User ID

Tokens used

Remaining balance

✅ REQUIRED TEST CASES
Unregistered user submits → gets real preview only

Registered user uploads → tokens deducted correctly

Credit purchase → balance updated immediately

Page reload → session persists

User A sees only own files; User B cannot access

User A deletes → only own files affected

