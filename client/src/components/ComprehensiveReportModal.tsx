import React, { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Download, FileText, Mail, FileType } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ModelProvider } from "@/types/analysis";
import { useToast } from "@/hooks/use-toast";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export interface ComprehensiveReport {
  intelligence: string;
  abstractThinking: string;
  originality: string;
  reasoningStyle: string;
  ambiguityHandling: string;
  metacognition: string;
  thinkingType: string;
  cognitiveComplexity: string;
  thinkingQuality: string;
  cognitiveArchetype: string;
  generatedBy: ModelProvider;
}

interface ComprehensiveReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  report: ComprehensiveReport | null;
}

export default function ComprehensiveReportModal({ 
  isOpen, 
  onClose, 
  report 
}: ComprehensiveReportModalProps) {
  const { toast } = useToast();
  const [documentFormat, setDocumentFormat] = useState<"pdf" | "docx">("pdf");
  const [isExporting, setIsExporting] = useState(false);
  const [isSharing, setIsSharing] = useState(false);
  const [recipientEmail, setRecipientEmail] = useState("");
  const [senderName, setSenderName] = useState("");
  const [showShareForm, setShowShareForm] = useState(false);

  if (!report) return null;

  const downloadAsText = () => {
    try {
      // Create text content
      let reportText = `COMPREHENSIVE COGNITIVE ANALYSIS\n\n`;
      reportText += `Generated by ${getProviderName(report.generatedBy)}\n\n`;
      
      reportText += `INTELLIGENCE LEVEL:\n${report.intelligence}\n\n`;
      reportText += `ABSTRACT THINKING:\n${report.abstractThinking}\n\n`;
      reportText += `ORIGINALITY OF INSIGHT:\n${report.originality}\n\n`;
      reportText += `REASONING STYLE:\n${report.reasoningStyle}\n\n`;
      reportText += `AMBIGUITY HANDLING:\n${report.ambiguityHandling}\n\n`;
      reportText += `METACOGNITIVE CONTROL:\n${report.metacognition}\n\n`;
      reportText += `THINKING TYPE:\n${report.thinkingType}\n\n`;
      reportText += `COGNITIVE COMPLEXITY:\n${report.cognitiveComplexity}\n\n`;
      reportText += `THINKING QUALITY:\n${report.thinkingQuality}\n\n`;
      reportText += `COGNITIVE ARCHETYPE:\n${report.cognitiveArchetype}\n\n`;
      
      // Create a blob and download link
      const blob = new Blob([reportText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `comprehensive-cognitive-analysis-${report.generatedBy}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Report downloaded",
        description: "Your comprehensive report has been downloaded as a text file."
      });
    } catch (error) {
      console.error('Error downloading report:', error);
      toast({
        variant: "destructive",
        title: "Download failed",
        description: "There was an error downloading your report."
      });
    }
  };
  
  const exportDocument = async () => {
    try {
      setIsExporting(true);
      
      // Create export data with the report fields
      const exportData = {
        analysis: {
          // Create a structure that matches what the server expects for cognitive analysis
          score: 80,
          detailedAnalysis: report.intelligence + "\n\n" + report.abstractThinking + "\n\n" + report.originality,
          characteristics: [report.reasoningStyle, report.metacognition, report.thinkingType].map(s => s.substring(0, 50) + "..."),
          strengths: [report.ambiguityHandling, report.cognitiveComplexity].map(s => s.substring(0, 50) + "..."),
          tendencies: [report.thinkingQuality, report.cognitiveArchetype].map(s => s.substring(0, 50) + "...")
        },
        provider: report.generatedBy,
        analysisType: 'cognitive',
        format: documentFormat
      };
      
      // Make API request to generate document
      const response = await fetch('/api/export-document', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(exportData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to export document');
      }
      
      // Get the document as a blob
      const blob = await response.blob();
      
      // Create download link
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `comprehensive-cognitive-analysis-${report.generatedBy}-${Date.now()}.${documentFormat}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Document exported successfully",
        description: `Your analysis has been exported as a ${documentFormat.toUpperCase()} file.`,
      });
    } catch (error) {
      console.error('Error exporting document:', error);
      toast({
        variant: "destructive",
        title: "Export failed",
        description: error instanceof Error ? error.message : "Failed to export document. Please try again.",
      });
    } finally {
      setIsExporting(false);
    }
  };
  
  const shareViaEmail = async () => {
    try {
      if (!recipientEmail) {
        toast({
          variant: "destructive",
          title: "Email required",
          description: "Please enter a recipient email address.",
        });
        return;
      }
      
      setIsSharing(true);
      
      // Create data for the email sharing request
      const shareData = {
        analysis: {
          // Create a structure that matches what the server expects for cognitive analysis
          score: 80,
          detailedAnalysis: report.intelligence + "\n\n" + report.abstractThinking + "\n\n" + report.originality,
          characteristics: [report.reasoningStyle, report.metacognition, report.thinkingType].map(s => s.substring(0, 50) + "..."),
          strengths: [report.ambiguityHandling, report.cognitiveComplexity].map(s => s.substring(0, 50) + "..."),
          tendencies: [report.thinkingQuality, report.cognitiveArchetype].map(s => s.substring(0, 50) + "...")
        },
        provider: report.generatedBy,
        analysisType: 'cognitive',
        format: documentFormat,
        recipientEmail,
        senderName: senderName || "Cognitive Profile App User"
      };
      
      // Make API request to share via email
      const response = await fetch('/api/share-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(shareData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to share via email');
      }
      
      toast({
        title: "Analysis shared successfully",
        description: `Your comprehensive analysis has been sent to ${recipientEmail}.`,
      });
      
      // Reset form and hide it
      setRecipientEmail("");
      setSenderName("");
      setShowShareForm(false);
    } catch (error) {
      console.error('Error sharing via email:', error);
      toast({
        variant: "destructive",
        title: "Sharing failed",
        description: error instanceof Error ? error.message : "Failed to share via email. Please try again.",
      });
    } finally {
      setIsSharing(false);
    }
  };

  const getProviderName = (provider: ModelProvider): string => {
    const providerNames: Record<ModelProvider, string> = {
      openai: "OpenAI",
      anthropic: "Anthropic (Claude)",
      perplexity: "Perplexity"
    };
    return providerNames[provider] || provider;
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <span>Comprehensive Cognitive Analysis</span>
            <div className="flex gap-2">
              <Button size="sm" variant="outline" onClick={downloadAsText}>
                <FileType className="h-4 w-4 mr-1" />
                Text
              </Button>
              
              {/* PDF/Word export dropdown */}
              <div className="relative inline-block">
                <Select 
                  value={documentFormat} 
                  onValueChange={(value) => setDocumentFormat(value as "pdf" | "docx")}
                >
                  <SelectTrigger className="w-[130px] h-9">
                    <SelectValue placeholder="Format" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pdf">PDF Document</SelectItem>
                    <SelectItem value="docx">Word Document</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Button size="sm" variant="outline" onClick={exportDocument} disabled={isExporting}>
                <FileText className="h-4 w-4 mr-1" />
                {isExporting ? "Exporting..." : "Export"}
              </Button>
              
              <Button size="sm" variant="outline" onClick={() => setShowShareForm(true)}>
                <Mail className="h-4 w-4 mr-1" />
                Share
              </Button>
            </div>
          </DialogTitle>
          <DialogDescription>
            Generated by {getProviderName(report.generatedBy)}
          </DialogDescription>
        </DialogHeader>
        
        {/* Email sharing form */}
        {showShareForm && (
          <div className="mb-4 p-4 border rounded-md bg-slate-50">
            <h3 className="text-sm font-medium mb-3">Share Report via Email</h3>
            <div className="grid gap-4 mb-3">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="recipient-email" className="text-right">
                  Recipient
                </Label>
                <Input
                  id="recipient-email"
                  type="email"
                  value={recipientEmail}
                  onChange={(e) => setRecipientEmail(e.target.value)}
                  placeholder="recipient@example.com"
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="sender-name" className="text-right">
                  Your Name
                </Label>
                <Input
                  id="sender-name"
                  value={senderName}
                  onChange={(e) => setSenderName(e.target.value)}
                  placeholder="Optional"
                  className="col-span-3"
                />
              </div>
            </div>
            <div className="flex justify-end gap-2">
              <Button variant="outline" size="sm" onClick={() => setShowShareForm(false)}>
                Cancel
              </Button>
              <Button 
                size="sm" 
                onClick={shareViaEmail}
                disabled={isSharing || !recipientEmail}
              >
                {isSharing ? "Sending..." : "Send Email"}
              </Button>
            </div>
          </div>
        )}
        
        <div className="mt-4">
          <Tabs defaultValue="intelligence" className="w-full">
            <TabsList className="grid grid-cols-5 mb-4">
              <TabsTrigger value="intelligence">Intelligence</TabsTrigger>
              <TabsTrigger value="thinking">Thinking</TabsTrigger>
              <TabsTrigger value="reasoning">Reasoning</TabsTrigger>
              <TabsTrigger value="complexity">Complexity</TabsTrigger>
              <TabsTrigger value="archetype">Archetype</TabsTrigger>
            </TabsList>
            
            <TabsContent value="intelligence" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-2">Intelligence Level</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.intelligence}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold mb-2">Abstract Thinking</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.abstractThinking}</p>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="thinking" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-2">Originality of Insight</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.originality}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold mb-2">Thinking Type</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.thinkingType}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold mb-2">Thinking Quality</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.thinkingQuality}</p>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="reasoning" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-2">Reasoning Style</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.reasoningStyle}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold mb-2">Ambiguity Handling</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.ambiguityHandling}</p>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="complexity" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-2">Metacognitive Control</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.metacognition}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold mb-2">Cognitive Complexity</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.cognitiveComplexity}</p>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="archetype" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-2">Cognitive Archetype</h3>
                <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200">
                  <p className="text-neutral-700">{report.cognitiveArchetype}</p>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
}